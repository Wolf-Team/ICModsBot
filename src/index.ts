import Config from "./classes/Config.js";
import Dialogue from "./classes/Dialogue.js";
import ICModsAPI from "./classes/ICModsAPI.js";
import Command, { API } from "./classes/Command.js";
import { beautifyNumber } from "./utils.js";

import NodeVK, { GroupSession, NewMessageEvent } from "nodevk-ts";

const __CONFIG__: Config = Config.parseFromFile("config.json");
const HIDDEN_ICON = __CONFIG__.get("vk.hidden_icon", "üîí");
const __ADMINS__: number[] = [__CONFIG__.get<number>("vk.owner"), ...__CONFIG__.get<number[]>("vk.admins", [])];
let __DONUTS__: number[] = __CONFIG__.get<number[]>("vk.donuts", []);

const HELP_TEXT = `===== –ü–æ–º–æ—â—å =====
üî∑ –ú–æ–¥ (ID –º–æ–¥–∞) - –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ
üî∑ –ü–æ–¥–ø–∏—Å–∫–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (ID –º–æ–¥–∞) - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–∞
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –º–æ–¥—ã - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–æ–≤ -  –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞ (ID –∞–≤—Ç–æ—Ä–∞) - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –∞–≤—Ç–æ—Ä–∞
üî∑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ (ID –∞–≤—Ç–æ—Ä–∞) - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –º–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∞
===== –ü–æ–º–æ—â—å =====
üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://vk.com/@icmodsbot-description`;

function isAdmin(user: number): boolean {
    return __ADMINS__.includes(user);
}

async function isAdminForChat(user_id: number, chat_id: number, event: NewMessageEvent): Promise<boolean> {
    if (!NodeVK.isChat(chat_id))
        return true;

    let r = await event.Session.invokeMethod("messages.getConversationsById", {
        peer_ids: NodeVK.getPeerIDForChat(chat_id)
    });
    if (r.error) throw r.error;
    if (r.response.count == 0) throw "no_perms";
    let sett = r.response.items[0].chat_settings;
    if (sett.owner_id == user_id) return true;
    return sett.admin_ids.indexOf(user_id) != -1;
}
function isDonut(user: number) {
    return isAdmin(user) || __DONUTS__.includes(user);
}

interface PrintModSettings {
    title?: string,
    downloads?: true,
    tags?: true,
    github?: true,
    multiplayer?: true,
    likes?: true,
    last_update?: true,
    changelog?: true
}
function printMod(mod: ICModsAPI.Mod, settings: PrintModSettings) {
    let str = settings.title ? settings.title + "\n\n" : "";

    if (mod.hidden) str += HIDDEN_ICON + " ";
    str += `${mod.title} [${mod.version_name}]\n\n`
    if (mod.enabled) str += mod.description + "\n\n";
    str += `üë§ –ê–≤—Ç–æ—Ä: ${mod.author_name}\n`;

    if (settings.downloads)
        str += `üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: ${mod.downloads}\n`;
    if (settings.likes)
        str += `‚ù§ –õ–∞–π–∫–æ–≤: ${mod.likes}\n`;
    if (settings.last_update)
        str += `üïë –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${mod.last_update}\n`;
    if (settings.tags)
        str += `üîó –¢–µ–≥–∏: ${mod.tags.join(", ")}\n`;
    if (settings.github && mod.github)
        str += `üìù GitHub: ${mod.github}\n`;
    if (settings.multiplayer && mod.multiplayer == 1)
        str += "üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞\n";

    if (settings.changelog && mod.version > 1)
        str += `\nüìÑ ChangeLog:\n${mod.changelog}\n`;

    str += `\nüìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod.id}\nüì• –°–∫–∞—á–∞—Ç—å –º–æ–¥: https://icmods.mineprogramming.org/api/download?horizon&id=${mod.id}`
    return str;
}

interface PrintCommentSettings {
    mod_title: string,
    mod_id: number,
    author: string,
    comment: string
}
function printComment(settings: PrintCommentSettings) {
    return `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –º–æ–¥–æ–º ${settings.mod_title}!

üë§ –ê–≤—Ç–æ—Ä ${settings.author}
- ${settings.comment}

üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${settings.mod_id}`
}


function registerCommands() {
    Command.register("ID", "(?:(?:\\/)?id|–º–æ–¥|mod)\\s([0-9]+)", async function (args, msg) {
        let mod = await ICModsAPI.description(parseInt(args[1]));
        if (mod.error || (mod.hidden && !isDonut(msg.peer_id)) || typeof mod == "string")
            return msg.reply("–ú–æ–¥ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");


        msg.reply(printMod(mod, {
            downloads: true,
            likes: true,
            last_update: true,
            tags: true,
            github: true,
            multiplayer: true
        }));
    });

    Command.register("Statistic download", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\s–∑–∞–≥—Ä—É–∑–æ–∫\\s([0-9]+)", async function (args, msg) {
        let mods = await ICModsAPI.searchModsFromAuthor(parseInt(args[1]));
        if (mods.length == 0)
            return msg.reply("–ú–æ–¥—ã –∞–≤—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

        let str = "";
        let downloads = 0;
        for (let i in mods) {
            let mod = await ICModsAPI.description(mods[i].id);
            str += `üî∑ ${mod.title}: ${beautifyNumber(mod.downloads, " ")}\n`;
            downloads += mod.downloads;
        }
        str += "\nüì• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫: " + beautifyNumber(downloads, " ");
        msg.reply(str);
    });

    Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–æ–±–Ω–æ–≤–ª–µ–Ω–∏(?:—è|–π)\\s([0-9]+|–º–æ–¥–æ–≤)", async function (args, msg, ci, api) {
        try {
            if (!(await isAdminForChat(msg.from_id, msg.peer_id, api))) return;
        } catch (e) {
            if (e == "no_perms")
                e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
            return msg.reply(e);
        }

        let id = parseInt(args[2]);
        let follow = args[1].toLowerCase() == "–ø–æ–¥";

        let following = Dialogue.get(msg.peer_id);
        let message = "";
        if (isNaN(id)) {
            if (follow) {
                try {
                    following.followAllMods();
                    message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
                } catch (e) {
                    message = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
                }
            } else {
                try {
                    following.unfollowAllMods();
                    message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
                } catch (e) {
                    message = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
                }
            }
        } else {
            let mod = await ICModsAPI.description(id);
            if (mod.error || mod.enabled == 0 || typeof mod == "string") {
                message = `–ú–æ–¥ —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
            } else {
                if (follow) {
                    try {
                        following.followMod(id);
                        message = `–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
                    } catch (e) {
                        message = `–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
                    }
                } else {
                    try {
                        following.unfollowMod(id);
                        message = `–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
                    } catch (e) {
                        message = `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
                    }
                }
            }
        }
        msg.reply(message);
    });

    Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –º–æ–¥—ã", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–Ω–æ–≤—ã(?:–µ|—Ö)\\s–º–æ–¥(?:—ã|–æ–≤)", async function (args, msg, ci, api) {


        try {
            if (!(await isAdminForChat(msg.from_id, msg.peer_id, api))) return;
        } catch (e) {
            if (e == "no_perms")
                e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
            return msg.reply(e);
        }

        let follow = args[1].toLowerCase() == "–ø–æ–¥";

        let following = Dialogue.get(msg.peer_id);
        let message = "";
        if (follow) {
            try {
                following.followNewMods();
                message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
            } catch (e) {
                message = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
            }
        } else {
            try {
                following.unfollowNewMods();
                message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
            } catch (e) {
                message = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
            }
        }
        msg.reply(message);
    });

    Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–∞–≤—Ç–æ—Ä–∞\\s([0-9]+)", async function (args, msg, ci, api) {
        try {
            if (!(await isAdminForChat(msg.from_id, msg.peer_id, api))) return;
        } catch (e) {
            if (e == "no_perms")
                e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
            return msg.reply(e);
        }

        let id = parseInt(args[2]);
        let follow = args[1].toLowerCase() == "–ø–æ–¥";

        let following = Dialogue.get(msg.peer_id);
        if (follow) {
            try {
                following.followAuthor(id);
                msg.reply("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ—Ä–∞.");
            } catch (e) {
                msg.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.");
            }
        } else {
            try {
                following.unfollowAuthor(id);
                msg.reply("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ—Ä–∞.");
            } catch (e) {
                msg.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.");
            }
        }
    });

    Command.register("–ü–æ–¥–ø–∏—Å–∫–∏", "–ø–æ–¥–ø–∏—Å–∫–∏", async function (args, msg) {
        let peer = Dialogue.get(msg.peer_id);
        if (peer.followingAllMods)
            return msg.reply("–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–º–∏ –º–æ–¥–∞–º–∏.");


        let mess = "";
        if (peer.followingNewMods)
            mess = "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤\n";

        if (peer.followingMods.length > 0) {
            mess += "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–æ–¥–∞–º–∏:\n";
            let mods = await ICModsAPI.listForIDs(peer.followingMods);
            for (let i in mods) {
                let mod = mods[i];
                mess += `üî∑ ${mod.title} - https://icmods.mineprogramming.org/mod?id=${mod.id}\n`;
            }
        }

        if (peer.followingAuthors.length > 0) {
            mess += "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–≤—Ç–æ—Ä–∞–º–∏:\n";
            for (let i in peer.followingAuthors) {
                let author = peer.followingAuthors[i];
                mess += `üî∑ ${author} - https://icmods.mineprogramming.org/search?author=${author}\n`;
            }
        }

        if (mess == "")
            return msg.reply("–í—ã –Ω–∏ –∑–∞ —á–µ–º –Ω–µ —Å–ª–µ–¥–∏—Ç–µ.");

        msg.reply(mess);
    });

    Command.register("–ü–æ–º–æ—â—å", "(–ø–æ–º–æ—â—å|–Ω–∞—á–∞—Ç—å)", (a, msg) => msg.reply(HELP_TEXT));

    Command.register("/save", "\\/save", (a, msg) => {
        if (NodeVK.isChat(msg.peer_id) || msg.from_id != __CONFIG__.get("vk.owner")) return;

        Dialogue.writeDB();
        msg.reply("–ó–∞–ø–∏—Å–∞–Ω–æ, –≤—ã—Ä—É–±–∞–π!");
    });

    Command.register("/tech", "\\/tech", (a, msg) => {
        if (msg.from_id != __CONFIG__.get("vk.owner")) return;
        msg.reply(`peer: ${msg.peer_id}

from: ${msg.from_id}`);
    });

    Command.register("/test", "\\/test", (a, msg) => {
        if (__CONFIG__.get("vk.owner") == msg.from_id)
            msg.reply("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞.");
    })
}

async function main() {
    Dialogue.init(__CONFIG__.get("icmods.save_interval", 60000));
    registerCommands();

    const VKSession = new GroupSession(__CONFIG__.get<string>("vk.token"));
    const group_id = __CONFIG__.get<number>("vk.group_id");

    __DONUTS__.push(...(await VKSession.invokeMethod<{ items: number[] }>("groups.getMembers", {
        group_id: group_id,
        filter: "donut"
    })).response.items);

    VKSession.setSettingsLongPoll(group_id);
    VKSession.on("message_new", async function (message: NewMessageEvent) {
        const is_chat = NodeVK.isChat(message.peer_id);

        if (!is_chat && await VKSession.groups.isMembers(group_id, message.from_id) == 0)
            return message.reply("–ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É.");

        if (Command.TryInvoke(message.message, message, message.ClientInfo, message) == false && !is_chat)
            message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è...\n\n" + HELP_TEXT);
    });
    VKSession.on("donut_subscription_create", function (message) {
        __DONUTS__.push(message.user_id);
    });
    VKSession.on("donut_subscription_expired", function (message) {
        delete __DONUTS__[__DONUTS__.indexOf(message.user_id)];
    });
    VKSession.on("donut_subscription_cancelled", function (message) {
        delete __DONUTS__[__DONUTS__.indexOf(message.user_id)];
    });
    console.log("–ó–∞–ø—É—Å–∫ LongPoll.");
    VKSession.startLongPoll(() => console.log("LongPoll –∑–∞–ø—É—â–µ–Ω."));


    const port = __CONFIG__.get<number>("icmods.callback_port", null);
    const timeout = __CONFIG__.get("icmods.listener_timeout", 60000);

    let Server: ICModsAPI.Server;
    let callback: () => void;
    if (port != null) {
        Server = new ICModsAPI.CallbackServer(port);
        callback = () => console.log(`Web —Å–µ–≤—Ä–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}.`);
    } else {
        Server = new ICModsAPI.ListenerServer(timeout);
        callback = () => console.log(`–°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ ${timeout}–º—Å.`);
    }

    Server.register("test", () => VKSession.messages.send(__CONFIG__.get("vk.owner"), "–¢–µ—Å—Ç–æ–≤—ã–π —Ö—É–∫"));
    Server.register("mod_add", async mod_id => {
        const mod = await ICModsAPI.getModInfo(mod_id);
        const msg = printMod(mod, {
            title: "–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–æ–¥!",
            tags: true,
            github: true,
            multiplayer: true
        });

        const peers = Dialogue.getPeersFollowing({
            author: mod.author,
            mod: mod.id,
            new: true
        });

        for (let i in peers)
            if (mod.enabled || isDonut(peers[i]))
                if (!NodeVK.isChat(peers[i]) && !VKSession.groups.isMembers(group_id, peers[i]))
                    VKSession.messages.send(peers[i], "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
                else
                    VKSession.messages.send(peers[i], msg);

    })
    Server.register("mod_update", async mod_id => {
        const mod = await ICModsAPI.getModInfo(mod_id);
        const msg = printMod(mod, {
            title: "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞!",
            tags: true,
            github: true,
            multiplayer: true,
            changelog: true
        });

        const peers = Dialogue.getPeersFollowing({
            author: mod.author,
            mod: mod.id
        });
        for (let i in peers)
            if (mod.enabled || isDonut(peers[i]))
                if (!NodeVK.isChat(peers[i]) && !VKSession.groups.isMembers(group_id, peers[i]))
                    VKSession.messages.send(peers[i], "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
                else
                    VKSession.messages.send(peers[i], msg);
    });
    Server.register("comment_add", async (mod_id, user_id, comment) => {
        const mod = await ICModsAPI.getModInfo(mod_id);
        const msg = printComment({
            mod_title: mod.title,
            mod_id: mod.id,
            author: mod.comments[0].user,
            comment: comment
        });

        const peers = Dialogue.getPeersFollowing({
            author: mod.author,
            mod: mod.id
        });

        for (let i in peers)
            if (mod.enabled || isDonut(peers[i]))
                if (!NodeVK.isChat(peers[i]) && !VKSession.groups.isMembers(group_id, peers[i]))
                    VKSession.messages.send(peers[i], "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
                else
                    VKSession.messages.send(peers[i], msg);
    });

    Server.register("screenshot_add", mod_id => {
        for (const peer of __ADMINS__)
            VKSession.messages.send(peer, `–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
    });
    Server.register("screenshot_edit", mod_id => {
        for (const peer of __ADMINS__)
            VKSession.messages.send(peer, `–ò–∑–º–µ–Ω–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
    });
    Server.register("screenshot_delete", mod_id => {
        for (const peer of __ADMINS__)
            VKSession.messages.send(peer, `–£–¥–∞–ª–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
    });

    Server.register("icon_update", mod_id => {
        for (const peer of __ADMINS__)
            VKSession.messages.send(peer, `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –º–æ–¥–∞ ID: ${mod_id}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
    });

    Server.register("mod_edit", mod_id => {
        for (const peer of __ADMINS__)
            VKSession.messages.send(peer, `–ò–∑–º–µ–Ω–µ–Ω –º–æ–¥ ID: ${mod_id}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
    });

    Server.start(callback);
}

main();

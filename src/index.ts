import NodeVK, { GroupSession, NewMessageEvent } from "nodevk-ts";
import App from "./NodeScriptApp/App.js";
import Logger from "./NodeScriptApp/Logger.js";
import Config from "./utils/Config.js";
import FollowersDB from "./ICMods/FollowersDB.js";
import ICModsAPI, { Server, ListenerServer, CallbackServer } from "icmodsapi";
import { printComment, printMod, beautifyNumber } from "./utils/utils.js";
import Command from "./utils/Command.js";


const HELP_TEXT = `===== –ü–æ–º–æ—â—å =====
üî∑ –ú–æ–¥ (ID –º–æ–¥–∞) - –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ
üî∑ –ü–æ–¥–ø–∏—Å–∫–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (ID –º–æ–¥–∞) - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–∞
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –º–æ–¥—ã - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–æ–≤ -  –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
üî∑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞ (ID –∞–≤—Ç–æ—Ä–∞) - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –∞–≤—Ç–æ—Ä–∞
üî∑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ (ID –∞–≤—Ç–æ—Ä–∞) - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –º–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∞
===== –ü–æ–º–æ—â—å =====
üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://vk.com/@icmodsbot-description`;

class Application extends App {
	private _config: Config;
	private _icmodsListener: Server;
	private _vksession: GroupSession;
	private _db: FollowersDB;
	private _all_and_news: number[];

	private get _admins() {
		return [this._config.get<number>("vk.owner"), ...this._config.get<number[]>("vk.admins", [])];
	}

	protected async onShutdown(): Promise<void> {
		this._db.stop();
		await this._icmodsListener.close();
	}

	protected async onLaunch(): Promise<void> {
		this._config = Config.parseFromFile("config.json");


		this.registerDB();

		await Promise.all([
			this.registerVKSession(),
			new Promise(r => r(this.registerCommands())),
			this.registerICModsListener()
		]);
	}

	registerDB() {
		this._db = new FollowersDB(this._config.get("db.save_interval"));
		Logger.Log("–ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "FollowersDB");
		this._db.start();
		Logger.Log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞", "FollowersDB");
		this._config.get<number[]>("vk.donuts", []).forEach(e => this._db.get(e.toString()).isDon = true);
		this._all_and_news = this._config.get("followers.all_and_news", []);
	}

	async registerVKSession() {
		const promises: Promise<any>[] = [];

		const groupId = this._config.get("vk.group_id"),
			token = this._config.get("vk.token");

		this._vksession = new GroupSession(token);
		this._vksession.setSettingsLongPoll(groupId);

		this.registerVKSessionEvents();

		promises.push(
			this._vksession.invokeMethod<{ items: number[] }>("groups.getMembers", {
				group_id: groupId,
				filter: "donut"
			}).then(
				r => r.response.items.forEach(
					e => this._db.get(e.toString()).isDon = true
				)
			)
		);

		Logger.Log("–ó–∞–ø—É—Å–∫ LongPoll.", "LongPoll");
		promises.push(new Promise((r, e) => {
			this._vksession.startLongPoll(() => r(Logger.Log("LongPoll –∑–∞–ø—É—â–µ–Ω.", "LongPoll")));
		}));

		await Promise.all(promises);
	}

	async registerICModsListener() {

		const port = this._config.get("icmods.callback_port", null);
		if (port) {
			this._icmodsListener = new CallbackServer({ port: port });
		} else {
			this._icmodsListener = new ListenerServer(this._config.get("icmods.listener_timeout", 60000));
		}

		this.registerICModsListenerEvents();
		await this._icmodsListener.listen();
	}

	registerVKSessionEvents() {
		this._vksession.on("message_new", async (message: NewMessageEvent) => {
			const is_chat = NodeVK.isChat(message.peer_id);

			if (!is_chat && await this._vksession.groups.isMembers(this._config.get("vk.group_id"), message.from_id) == 0)
				return message.reply("–ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É.");

			if (Command.TryInvoke(message.message, message, message.ClientInfo, message) == false && !is_chat)
				message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è...\n\n" + HELP_TEXT);
		});

		this._vksession.on("donut_subscription_create", (message) => {
			this._db.get(message.user_id).isDon = true;
		});
		this._vksession.on("donut_subscription_expired", (message) => {
			this._db.get(message.user_id).isDon = false;
		});
		this._vksession.on("donut_subscription_cancelled", (message) => {
			this._db.get(message.user_id).isDon = false;
		});
	}

	registerICModsListenerEvents() {
		this._icmodsListener.on("test", () => this._vksession.messages.send(this._config.get("vk.owner"), "–¢–µ—Å—Ç–æ–≤—ã–π —Ö—É–∫"));

		this._icmodsListener.on("mod_add", async mod_id => {
			const mod = await ICModsAPI.getModInfo(mod_id, ICModsAPI.Lang.RU);
			const msg = printMod(mod, {
				title: "–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–æ–¥!",
				tags: true,
				github: true,
				multiplayer: true
			});

			const followers = this._db.search(follower => {
				if (mod.hidden && !follower.isDon) return false;
				return follower.allMod && (follower.isDon || this._all_and_news.indexOf(follower.id) != -1) ||
					follower.newMod && (follower.isDon || this._all_and_news.indexOf(follower.id) != -1) ||
					follower.authors.indexOf(mod.author) != -1 ||
					follower.mods.indexOf(mod.id) != -1;
			});

			for (const follower of followers)
				if (!NodeVK.isChat(follower.id) && !this._vksession.groups.isMembers(this._config.get("vk.group_id"), follower.id))
					this._vksession.messages.send(follower.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
				else
					this._vksession.messages.send(follower.id, msg);
		});

		this._icmodsListener.on("mod_update", async mod_id => {
			const mod = await ICModsAPI.getModInfo(mod_id, ICModsAPI.Lang.RU);
			const msg = printMod(mod, {
				title: "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞!",
				tags: true,
				github: true,
				multiplayer: true,
				changelog: true
			});

			const followers = this._db.search(follower => {
				if (mod.hidden && !follower.isDon) return false;
				return follower.allMod && (follower.isDon || this._all_and_news.indexOf(follower.id) != -1) ||
					follower.authors.indexOf(mod.author) != -1 ||
					follower.mods.indexOf(mod.id) != -1;
			});

			for (const follower of followers)
				if (!NodeVK.isChat(follower.id) && !this._vksession.groups.isMembers(this._config.get("vk.group_id"), follower.id))
					this._vksession.messages.send(follower.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
				else
					this._vksession.messages.send(follower.id, msg);
		});
		this._icmodsListener.on("comment_add", async (mod_id, user_id, comment) => {
			const mod = await ICModsAPI.getModInfo(mod_id, ICModsAPI.Lang.RU);
			const msg = printComment({
				mod_title: mod.title,
				mod_id: mod.id,
				author: mod.comments[0].user,
				comment: comment
			});

			const followers = this._db.search(follower => {
				if (mod.hidden && !follower.isDon) return false;
				return follower.allMod && (follower.isDon || this._all_and_news.indexOf(follower.id) != -1) ||
					follower.authors.indexOf(mod.author) != -1 ||
					follower.mods.indexOf(mod.id) != -1;
			});

			for (const follower of followers)
				if (!NodeVK.isChat(follower.id) && !this._vksession.groups.isMembers(this._config.get("vk.group_id"), follower.id))
					this._vksession.messages.send(follower.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –µ–≥–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.");
				else
					this._vksession.messages.send(follower.id, msg);
		});

		this._icmodsListener.on("screenshot_add", mod_id => {
			for (const peer of this._admins)
				this._vksession.messages.send(peer, `–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}
	
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
		});
		this._icmodsListener.on("screenshot_edit", mod_id => {
			for (const peer of this._admins)
				this._vksession.messages.send(peer, `–ò–∑–º–µ–Ω–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}
	
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
		});
		this._icmodsListener.on("screenshot_delete", mod_id => {
			for (const peer of this._admins)
				this._vksession.messages.send(peer, `–£–¥–∞–ª–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–¥–∞ ID: ${mod_id}
	
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
		});

		this._icmodsListener.on("icon_update", mod_id => {
			for (const peer of this._admins)
				this._vksession.messages.send(peer, `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –º–æ–¥–∞ ID: ${mod_id}
	
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
		});

		this._icmodsListener.on("mod_edit", mod_id => {
			for (const peer of this._admins)
				this._vksession.messages.send(peer, `–ò–∑–º–µ–Ω–µ–Ω –º–æ–¥ ID: ${mod_id}
	
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞: https://icmods.mineprogramming.org/mod?id=${mod_id}
				–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: https://admin.mineprogramming.org/mod.php?id=${mod_id}`);
		});
	}

	async isAdminForChat(user: number, peer: number) {
		if (!NodeVK.isChat(peer))
			return true;

		let r = await this._vksession.invokeMethod("messages.getConversationsById", {
			peer_ids: NodeVK.getPeerIDForChat(peer)
		});
		if (r.error) throw r.error;
		if (r.response.count == 0) throw "no_perms";
		let sett = r.response.items[0].chat_settings;
		if (sett.owner_id == user) return true;
		return sett.admin_ids.indexOf(user) != -1;
	}

	registerCommands() {
		Command.register("ID", "(?:(?:\\/)?id|–º–æ–¥|mod)\\s([0-9]+)", async (args, msg) => {
			console.log("Invoke mod");
			try {
				let mod = await ICModsAPI.description(parseInt(args[1]), ICModsAPI.Lang.RU);

				if ((mod.hidden && !this._db.get(msg.peer_id.toString()).isDon) || typeof mod == "string")
					return msg.reply("–ú–æ–¥ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");


				msg.reply(printMod(mod, {
					downloads: true,
					likes: true,
					last_update: true,
					tags: true,
					github: true,
					multiplayer: true
				}));
			} catch (e) {
				console.log("Error", e);
				msg.reply("–ú–æ–¥ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			}
		});

		Command.register("Statistic download", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\s–∑–∞–≥—Ä—É–∑–æ–∫\\s([0-9]+)", async function (args, msg) {
			let mods = await ICModsAPI.searchModsFromAuthor(parseInt(args[1]), ICModsAPI.Lang.RU);
			if (mods.length == 0)
				return msg.reply("–ú–æ–¥—ã –∞–≤—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

			let str = "";
			let downloads = 0;

			for (let i in mods) {
				let mod = await ICModsAPI.description(mods[i].id, ICModsAPI.Lang.RU);
				str += `üî∑ ${mod.title}: ${beautifyNumber(mod.downloads, " ")}\n`;
				downloads += mod.downloads;
			}
			str += "\nüì• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫: " + beautifyNumber(downloads, " ");
			msg.reply(str);
		});

		Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–æ–±–Ω–æ–≤–ª–µ–Ω–∏(?:—è|–π)\\s([0-9]+|–º–æ–¥–æ–≤)", async (args, msg, ci, api) => {
			try {
				if (!(await this.isAdminForChat(msg.from_id, msg.peer_id))) return;
			} catch (e) {
				if (e == "no_perms")
					e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
				return msg.reply(e);
			}

			let id = parseInt(args[2]);
			let follow = args[1].toLowerCase() == "–ø–æ–¥";

			let follower = this._db.get(msg.peer_id.toString());
			let message = "";
			if (isNaN(id)) {
				if (follower.isDon) {
					message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –¥–æ–Ω–æ–º –≥—Ä—É–ø–ø—ã.";
				} else {
					if (follow) {
						try {
							follower.followAllMods();
							message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
						} catch (e) {
							message = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
						}
					} else {
						try {
							follower.unfollowAllMods();
							message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
						} catch (e) {
							message = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤.";
						}
					}
				}
			} else {
				try {
					let mod = await ICModsAPI.description(id);
					if (!mod.enabled || typeof mod == "string") {
						message = `–ú–æ–¥ —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
					} else {
						if (follow) {
							try {
								follower.followMod(id);
								message = `–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
							} catch (e) {
								message = `–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
							}
						} else {
							try {
								follower.unfollowMod(id);
								message = `–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
							} catch (e) {
								message = `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${mod.title}.`
							}
						}
					}
				} catch (e) {
					message = `–ú–æ–¥ —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
				}

			}
			msg.reply(message);
		});

		Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –º–æ–¥—ã", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–Ω–æ–≤—ã(?:–µ|—Ö)\\s–º–æ–¥(?:—ã|–æ–≤)", async (args, msg, ci, api) => {
			try {
				if (!(await this.isAdminForChat(msg.from_id, msg.peer_id))) return;
			} catch (e) {
				if (e == "no_perms")
					e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
				return msg.reply(e);
			}

			let follow = args[1].toLowerCase() == "–ø–æ–¥";

			let follower = this._db.get(msg.peer_id.toString());
			let message = "";
			if (follower.isDon) {
				message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –¥–æ–Ω–æ–º –≥—Ä—É–ø–ø—ã.";
			} else if (follow) {
				try {
					follower.followNewMods();
					message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
				} catch (e) {
					message = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
				}
			} else {
				try {
					follower.unfollowNewMods();
					message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
				} catch (e) {
					message = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤.";
				}
			}
			msg.reply(message);
		});

		Command.register("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞", "(–ø–æ–¥|–æ—Ç)–ø–∏—Å–∞—Ç—å—Å—è\\s(?:–Ω–∞|–æ—Ç)\\s–∞–≤—Ç–æ—Ä–∞\\s([0-9]+)", async (args, msg, ci, api) => {
			try {
				if (!(await this.isAdminForChat(msg.from_id, msg.peer_id))) return;
			} catch (e) {
				if (e == "no_perms")
					e = "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
				return msg.reply(e);
			}

			let id = parseInt(args[2]);
			let follow = args[1].toLowerCase() == "–ø–æ–¥";

			let follower = this._db.get(msg.peer_id.toString());
			if (follow) {
				try {
					follower.followAuthor(id);
					msg.reply("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ—Ä–∞.");
				} catch (e) {
					msg.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.");
				}
			} else {
				try {
					follower.unfollowAuthor(id);
					msg.reply("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ—Ä–∞.");
				} catch (e) {
					msg.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.");
				}
			}
		});

		Command.register("–ü–æ–¥–ø–∏—Å–∫–∏", "–ø–æ–¥–ø–∏—Å–∫–∏", async (args, msg) => {
			const follower = this._db.get(msg.peer_id.toString());
			if (follower.allMod)
				return msg.reply("–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–º–∏ –º–æ–¥–∞–º–∏.");


			let mess = "";
			if (follower.newMod)
				mess = "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –Ω–æ–≤—ã—Ö –º–æ–¥–æ–≤\n";

			if (follower.mods.length > 0) {
				mess += "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–æ–¥–∞–º–∏:\n";
				let mods = await ICModsAPI.listForIDs(follower.mods);
				for (let i in mods) {
					let mod = mods[i];
					mess += `üî∑ ${mod.title} - https://icmods.mineprogramming.org/mod?id=${mod.id}\n`;
				}
			}

			if (follower.authors.length > 0) {
				mess += "–í—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–≤—Ç–æ—Ä–∞–º–∏:\n";
				for (let i in follower.authors) {
					let author = follower.authors[i];
					mess += `üî∑ ${author} - https://icmods.mineprogramming.org/search?author=${author}\n`;
				}
			}

			if (mess == "")
				return msg.reply("–í—ã –Ω–∏ –∑–∞ —á–µ–º –Ω–µ —Å–ª–µ–¥–∏—Ç–µ.");

			msg.reply(mess);
		});

		Command.register("–ü–æ–º–æ—â—å", "(–ø–æ–º–æ—â—å|–Ω–∞—á–∞—Ç—å)", (a, msg) => msg.reply(HELP_TEXT));

		Command.register("/save", "\\/save", (a, msg) => {
			if (NodeVK.isChat(msg.peer_id) || msg.from_id != this._config.get("vk.owner")) return;

			this._db.writeDB();
			msg.reply("–ó–∞–ø–∏—Å–∞–Ω–æ, –≤—ã—Ä—É–±–∞–π!");
		});

		Command.register("/tech", "\\/tech", (a, msg) => {
			if (msg.from_id != this._config.get("vk.owner")) return;
			msg.reply(`peer: ${msg.peer_id}
	
	from: ${msg.from_id}`);
		});

		Command.register("/test", "\\/test", (a, msg) => {
			if (this._config.get("vk.owner") == msg.from_id)
				msg.reply("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞.");
		})
	}
}

new Application().launch();
